'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var soundfontPlayer = require('soundfont-player');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var INSTRUMENTS = [
    "accordion",
    "acoustic_bass",
    "acoustic_grand_piano",
    "acoustic_guitar_nylon",
    "acoustic_guitar_steel",
    "agogo",
    "alto_sax",
    "applause",
    "bagpipe",
    "banjo",
    "baritone_sax",
    "bassoon",
    "bird_tweet",
    "blown_bottle",
    "brass_section",
    "breath_noise",
    "bright_acoustic_piano",
    "celesta",
    "cello",
    "choir_aahs",
    "church_organ",
    "clarinet",
    "clavinet",
    "contrabass",
    "distortion_guitar",
    "drawbar_organ",
    "dulcimer",
    "electric_bass_finger",
    "electric_bass_pick",
    "electric_grand_piano",
    "electric_guitar_clean",
    "electric_guitar_jazz",
    "electric_guitar_muted",
    "electric_piano_1",
    "electric_piano_2",
    "english_horn",
    "fiddle",
    "flute",
    "french_horn",
    "fretless_bass",
    "fx_1_rain",
    "fx_2_soundtrack",
    "fx_3_crystal",
    "fx_4_atmosphere",
    "fx_5_brightness",
    "fx_6_goblins",
    "fx_7_echoes",
    "fx_8_scifi",
    "glockenspiel",
    "guitar_fret_noise",
    "guitar_harmonics",
    "gunshot",
    "harmonica",
    "harpsichord",
    "helicopter",
    "honkytonk_piano",
    "kalimba",
    "koto",
    "lead_1_square",
    "lead_2_sawtooth",
    "lead_3_calliope",
    "lead_4_chiff",
    "lead_5_charang",
    "lead_6_voice",
    "lead_7_fifths",
    "lead_8_bass__lead",
    "marimba",
    "melodic_tom",
    "music_box",
    "muted_trumpet",
    "oboe",
    "ocarina",
    "orchestra_hit",
    "orchestral_harp",
    "overdriven_guitar",
    "pad_1_new_age",
    "pad_2_warm",
    "pad_3_polysynth",
    "pad_4_choir",
    "pad_5_bowed",
    "pad_6_metallic",
    "pad_7_halo",
    "pad_8_sweep",
    "pan_flute",
    "percussive_organ",
    "piccolo",
    "pizzicato_strings",
    "recorder",
    "reed_organ",
    "reverse_cymbal",
    "rock_organ",
    "seashore",
    "shakuhachi",
    "shamisen",
    "shanai",
    "sitar",
    "slap_bass_1",
    "slap_bass_2",
    "soprano_sax",
    "steel_drums",
    "string_ensemble_1",
    "string_ensemble_2",
    "synth_bass_1",
    "synth_bass_2",
    "synth_brass_1",
    "synth_brass_2",
    "synth_choir",
    "synth_drum",
    "synth_strings_1",
    "synth_strings_2",
    "taiko_drum",
    "tango_accordion",
    "telephone_ring",
    "tenor_sax",
    "timpani",
    "tinkle_bell",
    "tremolo_strings",
    "trombone",
    "trumpet",
    "tuba",
    "tubular_bells",
    "vibraphone",
    "viola",
    "violin",
    "voice_oohs",
    "whistle",
    "woodblock",
    "xylophone"
];

var _this = undefined;
var getAudioContext = function () {
    var AudioContext = window.AudioContext ||
        window.webkitAudioContext ||
        false;
    if (!AudioContext) {
        console.warn("Sorry but the WebAudio API is not supported on this browser. Please consider using Chrome or Safari for the best experience ");
        return {};
    }
    return new AudioContext();
};
var instruments = new Map();
var playingNotes = new Map();
var getInstrument = function (instrumentName) { return __awaiter(_this, void 0, void 0, function () {
    var ac, player, play, stop;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (instruments.has(instrumentName)) {
                    return [2, instruments.get(instrumentName)];
                }
                ac = getAudioContext();
                return [4, soundfontPlayer.instrument(ac, instrumentName)];
            case 1:
                player = _a.sent();
                play = function (noteName, options) {
                    if (options === void 0) { options = {}; }
                    var audioNode = player.play(noteName, 0, options);
                    playingNotes.set(instrumentName + "_" + noteName, audioNode);
                    if (!!options.duration) {
                        audioNode.stop(ac.currentTime + options.duration / 1000);
                    }
                };
                stop = function (noteName, fadeOutDuration) {
                    if (!!noteName && playingNotes.has(instrumentName + "_" + noteName)) {
                        playingNotes.get(instrumentName + "_" + noteName).stop();
                        playingNotes.delete(instrumentName + "_" + noteName);
                    }
                    else {
                        player.stop();
                    }
                };
                instruments.set(instrumentName, { play: play, stop: stop });
                return [2, { play: play, stop: stop }];
        }
    });
}); };
function startNote(instrumentName, noteName, noteOptions) {
    if (noteOptions === void 0) { noteOptions = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var instrument;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, getInstrument(instrumentName)];
                case 1:
                    instrument = _a.sent();
                    return [4, instrument.play(noteName, noteOptions)];
                case 2:
                    _a.sent();
                    return [2];
            }
        });
    });
}
function stopNote(instrumentName, noteName) {
    return __awaiter(this, void 0, void 0, function () {
        var instrument;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, getInstrument(instrumentName)];
                case 1:
                    instrument = _a.sent();
                    instrument.stop(noteName);
                    return [2];
            }
        });
    });
}

exports.instrumentNames = INSTRUMENTS;
exports.getAudioContext = getAudioContext;
exports.getInstrument = getInstrument;
exports.startNote = startNote;
exports.stopNote = stopNote;
